Pages: 131-132-133

HOURS
	CS Core = 4
	KA Core = 3

FPL-Functional: Functional Programming
CS Core:
1. Lambda expressions and evaluation: (See also: AL-Models, FPL-Formalism)
a. Variable binding and scope rules. (See also: SDF-Fundamentals)
b. Parameter-passing. (See also: SDF-Fundamentals)
c. Nested lambda expressions and reduction order.
2. Effect-free programming:
a. Function calls have no side effects, facilitating compositional reasoning.
b. Immutable variables and data copying vs reduction.
c. Use of recursion vs loops vs pipelining (map/reduce).
3. Processing structured data (e.g., trees) via functions with cases for each data variant:
a. Functions defined over compound data in terms of functions applied to the constituent pieces.
b. Persistent data structures.
4. Using higher-order functions (taking, returning, and storing functions).
KA Core:
5. Metaprogramming and reflection.
6. Function closures (functions using variables in the enclosing lexical environment).
a. Basic meaning and definition – creating closures at run-time by capturing the environment.
b. Canonical idioms: call-backs, arguments to iterators, reusable code via function arguments.
c. Using a closure to encapsulate data in its environment.
d. Delayed versus eager evaluation.
Non-core:
7. Graph reduction machine and call-by-need.
8. Implementing delayed evaluation.
9. Integration with logic programming paradigm using concepts such as equational logic, narrowing,
residuation and semantic unification. (See also: FPL-Logic)
10. Integration with other programming paradigms such as imperative and object-oriented.
Illustrative learning outcomes:
CS Core:
1. Develop basic algorithms that avoid assigning to mutable states or considering reference equality.
2. Develop useful functions that take and return other functions.
3. Compare and contrast how computational solutions to a problem differ in procedural, functional,
and object-oriented approaches.
4. Compare and contrast mechanisms to define and protect data elements within procedural,
functional, and object-oriented approaches.
KA Core:
5. Explain a simple example of lambda expression being implemented using a virtual machine, such
as a SECD machine, showing storage and reclaim of the environment.
6. Correctly interpret variables and lexical scope in a program using function closures.
7. Use functional encapsulation mechanisms such as closures and modular interfaces.
8. Compare and contrast stateful vs stateless execution.
9. Define and use iterators and other operations on aggregates, including operations that take
functions as arguments, in multiple programming languages, selecting the most natural idioms for
each language. (See also: FPL-OOP)
Non-core:
10. Illustrate graph reduction using a λ-expression using a shared subexpression.
11. Illustrate the execution of a simple nested λ-expression using an abstract machine, such as an ABC
machine.
12. Illustrate narrowing, residuation, and semantic unification using simple illustrative examples.
13. Illustrate the concurrency constructs using simple programming examples of known concepts such
as a buffer being read and written concurrently or sequentially. (See also: FPL-OOP)